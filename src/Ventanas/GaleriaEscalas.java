/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Ventanas;

import Clases.Nota;
import java.awt.Color;
import java.awt.Font;
import java.awt.Image;
import java.awt.Toolkit;
import java.net.URL;
import java.util.Arrays;
import java.util.List;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author MINEDUCYT
 */
public class GaleriaEscalas extends javax.swing.JFrame {

    DefaultTableModel escala = new DefaultTableModel();
    DefaultTableModel circulo = new DefaultTableModel();
    DefaultTableModel acordes = new DefaultTableModel();
    Nota[] notas = {
        new Nota(1, "DO"),
        new Nota(2, "DO#"),
        new Nota(3, "RE"),
        new Nota(4, "RE#"),
        new Nota(5, "MI"),
        new Nota(6, "FA"),
        new Nota(7, "FA#"),
        new Nota(8, "SOL"),
        new Nota(9, "SOL#"),
        new Nota(10, "LA"),
        new Nota(11, "LA#"),
        new Nota(12, "SI")
    };

    List<Integer> progresion = null;

    /**
     * Creates new form ArmadorEscalas
     */
    public GaleriaEscalas() {
        initComponents();

        this.setLocationRelativeTo(null);

        TableNotas = new JTable(escala);
        jScrollPane1.setViewportView(TableNotas);

        escala.addColumn("1°");
        escala.addColumn("2°");
        escala.addColumn("3°");
        escala.addColumn("4°");
        escala.addColumn("5°");
        escala.addColumn("6°");
        escala.addColumn("7°");
        escala.addColumn("8°");

        TableCirculo = new JTable(circulo);
        jScrollPane2.setViewportView(TableCirculo);

        circulo.addColumn("Tonica");
        circulo.addColumn("Tension");
        circulo.addColumn("Acompañante");
        circulo.addColumn("Complemento");

        Font font = new Font("Arial Black", Font.PLAIN, 12);
        TableNotas.setFont(font);
        TableCirculo.setFont(font);
        DefaultTableCellRenderer renderer = new DefaultTableCellRenderer();
        renderer.setForeground(new Color(255, 255, 255));
        renderer.setBackground(new Color(51, 51, 51));
        renderer.setFont(font);
        TableNotas.setDefaultRenderer(Object.class, renderer);
        TableCirculo.setDefaultRenderer(Object.class, renderer);
        TableNotas.setEnabled(false);
        TableCirculo.setEnabled(false);

        ImageIcon wallpaper = new ImageIcon("src/img/wallpaperPartitura.jpg");
        Icon icon = new ImageIcon(wallpaper.getImage().getScaledInstance(LabelWallpaper.getWidth(),
                LabelWallpaper.getHeight(), Image.SCALE_DEFAULT));

        LabelWallpaper.setIcon(icon);

    }

    @Override
    public Image getIconImage() {
        URL resourceUrl = ClassLoader.getSystemResource("img/icono.png");
        if (resourceUrl != null) {
            Image retValue = Toolkit.getDefaultToolkit().getImage(resourceUrl);
            return retValue;
        } else {
            System.err.println("No se pudo encontrar el recurso 'icono.png'");
            return null;
        }
    }

    public static String[] EscalaGenerada(List<Nota> notas, String notaInicial, List<Integer> progresion) {
        String[] escala = new String[progresion.size() + 1];

        int posInicial = -1;
        for (Nota nota : notas) {
            if (nota.getNombre().equalsIgnoreCase(notaInicial)) {
                posInicial = nota.getNumero() - 1;
                break;
            }
        }

        if (posInicial == -1) {
            return null;
        }

        escala[0] = notas.get(posInicial).getNombre();
        int posicionActual = posInicial;
        for (int i = 0; i < progresion.size(); i++) {
            posicionActual += progresion.get(i);
            if (posicionActual >= notas.size()) {
                posicionActual -= notas.size();
            }
            escala[i + 1] = notas.get(posicionActual).getNombre();
        }

        return escala;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        TableNotas = new javax.swing.JTable();
        CmbEscala = new javax.swing.JComboBox<>();
        CmbNota = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        TableCirculo = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        LabelSecuencia = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        LabelWallpaper = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setIconImage(getIconImage());
        setUndecorated(true);
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        TableNotas.setBackground(new java.awt.Color(51, 51, 51));
        TableNotas.setFont(new java.awt.Font("Arial Black", 1, 18)); // NOI18N
        TableNotas.setForeground(new java.awt.Color(255, 255, 255));
        TableNotas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TableNotas.setToolTipText("");
        TableNotas.setAutoscrolls(false);
        jScrollPane1.setViewportView(TableNotas);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 130, 499, 45));

        CmbEscala.setBackground(new java.awt.Color(51, 51, 51));
        CmbEscala.setFont(new java.awt.Font("Arial Black", 1, 18)); // NOI18N
        CmbEscala.setForeground(new java.awt.Color(255, 255, 255));
        CmbEscala.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Mayor", "Dorico", "Frigio", "Lidio", "Mixolidio", "Menor", "Locrio" }));
        CmbEscala.setToolTipText("");
        CmbEscala.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        CmbEscala.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                CmbEscalaItemStateChanged(evt);
            }
        });
        getContentPane().add(CmbEscala, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, 180, 47));

        CmbNota.setBackground(new java.awt.Color(51, 51, 51));
        CmbNota.setFont(new java.awt.Font("Arial Black", 1, 18)); // NOI18N
        CmbNota.setForeground(new java.awt.Color(255, 255, 255));
        CmbNota.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "DO", "DO#", "RE", "RE#", "MI", "FA", "FA#", "SOL", "SOL#", "LA", "LA#", "SI" }));
        CmbNota.setToolTipText("");
        CmbNota.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        CmbNota.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                CmbNotaItemStateChanged(evt);
            }
        });
        getContentPane().add(CmbNota, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 20, 180, 47));

        TableCirculo.setBackground(new java.awt.Color(51, 51, 51));
        TableCirculo.setFont(new java.awt.Font("Arial Black", 1, 18)); // NOI18N
        TableCirculo.setForeground(new java.awt.Color(255, 255, 255));
        TableCirculo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TableCirculo.setToolTipText("");
        TableCirculo.setAutoscrolls(false);
        jScrollPane2.setViewportView(TableCirculo);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 210, 499, 45));

        jButton1.setBackground(new java.awt.Color(51, 51, 51));
        jButton1.setFont(new java.awt.Font("Arial Black", 1, 18)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("Generar");
        jButton1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(197, 20, 150, 47));

        jLabel2.setFont(new java.awt.Font("Arial Black", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Esta escala se arma usando la secuencia:");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 280, 510, 50));

        LabelSecuencia.setFont(new java.awt.Font("Arial Black", 1, 14)); // NOI18N
        LabelSecuencia.setForeground(new java.awt.Color(255, 255, 255));
        LabelSecuencia.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        getContentPane().add(LabelSecuencia, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 320, 510, 40));

        jTextField1.setEditable(false);
        jTextField1.setBackground(new java.awt.Color(51, 51, 51));
        jTextField1.setFont(new java.awt.Font("Arial Black", 1, 18)); // NOI18N
        jTextField1.setForeground(new java.awt.Color(255, 255, 255));
        jTextField1.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField1.setText("Escala");
        jTextField1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(jTextField1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 100, 80, 40));

        jTextField2.setEditable(false);
        jTextField2.setBackground(new java.awt.Color(51, 51, 51));
        jTextField2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(jTextField2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 280, 510, 90));

        jTextField3.setEditable(false);
        jTextField3.setBackground(new java.awt.Color(51, 51, 51));
        jTextField3.setFont(new java.awt.Font("Arial Black", 1, 18)); // NOI18N
        jTextField3.setForeground(new java.awt.Color(255, 255, 255));
        jTextField3.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField3.setText("Circulo");
        jTextField3.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(jTextField3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 180, 80, 40));

        jButton2.setBackground(new java.awt.Color(51, 51, 51));
        jButton2.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jButton2.setForeground(new java.awt.Color(255, 0, 0));
        jButton2.setText("X");
        jButton2.setBorder(null);
        jButton2.setBorderPainted(false);
        jButton2.setContentAreaFilled(false);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 0, 40, 40));

        LabelWallpaper.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(LabelWallpaper, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 560, 390));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void CmbNotaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_CmbNotaItemStateChanged

    }//GEN-LAST:event_CmbNotaItemStateChanged

    private void CmbEscalaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_CmbEscalaItemStateChanged

    }//GEN-LAST:event_CmbEscalaItemStateChanged

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        int columnCount = escala.getColumnCount();
        for (int i = columnCount - 1; i >= 0; i--) {
            escala.setColumnCount(i);
        }

        int rowCount = circulo.getRowCount();
        for (int i = rowCount - 1; i >= 0; i--) {
            circulo.setRowCount(i);
        }

        int notaIndex = CmbNota.getSelectedIndex();
        int escalaindex = CmbEscala.getSelectedIndex();

        if (escalaindex == 0) {

            progresion = Arrays.asList(2, 2, 1, 2, 2, 2, 1);
            escala.addColumn("Mayor");
            escala.addColumn("Menor");
            escala.addColumn("Menor");
            escala.addColumn("Mayor");
            escala.addColumn("Mayor");
            escala.addColumn("Menor");
            escala.addColumn("Dism.");
        } else if (escalaindex == 1) {

            progresion = Arrays.asList(2, 1, 2, 2, 2, 1, 2);
            escala.addColumn("Menor");
            escala.addColumn("Menor");
            escala.addColumn("Mayor");
            escala.addColumn("Mayor");
            escala.addColumn("Menor");
            escala.addColumn("Dism.");
            escala.addColumn("Mayor");
        } else if (escalaindex == 2) {

            progresion = Arrays.asList(1, 2, 2, 2, 1, 2, 2);
            escala.addColumn("Menor");
            escala.addColumn("Mayor");
            escala.addColumn("Mayor");
            escala.addColumn("Menor");
            escala.addColumn("Dism.");
            escala.addColumn("Mayor");
            escala.addColumn("Menor");
        } else if (escalaindex == 3) {

            progresion = Arrays.asList(2, 2, 2, 1, 2, 2, 1);
            escala.addColumn("Mayor");
            escala.addColumn("Mayor");
            escala.addColumn("Menor");
            escala.addColumn("Dism.");
            escala.addColumn("Mayor");
            escala.addColumn("Menor");
            escala.addColumn("Menor");
        } else if (escalaindex == 4) {

            progresion = Arrays.asList(2, 2, 1, 2, 2, 1, 2);
            escala.addColumn("Mayor");
            escala.addColumn("Menor");
            escala.addColumn("Dism.");
            escala.addColumn("Mayor");
            escala.addColumn("Menor");
            escala.addColumn("Menor");
            escala.addColumn("Mayor");
        } else if (escalaindex == 5) {

            progresion = Arrays.asList(2, 1, 2, 2, 1, 2, 2);
            escala.addColumn("Menor");
            escala.addColumn("Dism.");
            escala.addColumn("Mayor");
            escala.addColumn("Menor");
            escala.addColumn("Menor");
            escala.addColumn("Mayor");
            escala.addColumn("Mayor");
        } else if (escalaindex == 6) {

            progresion = Arrays.asList(1, 2, 2, 1, 2, 2, 2);
            escala.addColumn("Dism.");
            escala.addColumn("Mayor");
            escala.addColumn("Menor");
            escala.addColumn("Menor");
            escala.addColumn("Mayor");
            escala.addColumn("Mayor");
            escala.addColumn("Menor");
        }

        if (progresion != null) {
            List<Nota> notasList = Arrays.asList(notas);
            String notaInicial = notas[notaIndex].getNombre();
            String[] escalaGenerada = escalaGenerada(notasList, notaInicial, progresion);

            while (escala.getRowCount() > 0) {
                escala.removeRow(0);
            }

            while (circulo.getRowCount() > 0) {
                circulo.removeRow(0);
            }

            if (escalaGenerada != null) {
                escala.addRow(escalaGenerada);
            } else {
                System.err.println("La nota inicial no es válida para la escala.");
            }
        }
        if (progresion != null) {

            while (acordes.getRowCount() > 0) {
                acordes.removeRow(0);
            }

            actualizarCirculo(notaIndex, escalaindex);

        }

    }

    public void actualizarCirculo(int notaIndex, int escalaIndex) {

        if (escalaIndex == 0 || escalaIndex == 1 || escalaIndex == 4 || escalaIndex == 5) {
            progresion = Arrays.asList(5, 2, 7, 7);
        } else if (escalaIndex == 2) {
            progresion = Arrays.asList(5, 2, 6, 7);
        } else if (escalaIndex == 3) {
            progresion = Arrays.asList(6, 1, 7, 7);
        } else if (escalaIndex == 6) {
            progresion = Arrays.asList(5, 1, 7, 7);
        }

        if (progresion != null) {
            List<Nota> notasList = Arrays.asList(notas);
            String notaInicial = notas[notaIndex].getNombre();
            String[] escalaGenerada = escalaGenerada(notasList, notaInicial, progresion);

            while (circulo.getRowCount() > 0) {
                circulo.removeRow(0);
            }

            if (escalaGenerada != null) {
                String[] escalaModificada = aplicarTiposAcordes(escalaGenerada, escalaIndex);

                circulo.addRow(escalaModificada);
            } else {
                System.err.println("La nota inicial no es válida para la escala.");
            }
        }

        String[] secuencias = {
            "Tono - Tono - SemiTono - Tono - Tono - Tono - SemiTono",
            "Tono - SemiTono - Tono - Tono - Tono - SemiTono - Tono",
            "SemiTono - Tono - Tono - Tono - SemiTono - Tono - Tono",
            "Tono - Tono - Tono - SemiTono - Tono - Tono - SemiTono",
            "Tono - Tono - SemiTono - Tono - Tono - SemiTono - Tono",
            "Tono - SemiTono - Tono - Tono - SemiTono - Tono - Tono",
            "SemiTono - Tono - Tono - SemiTono - Tono - Tono - Tono"
        };
        String secuencia;
        secuencia = secuencias[escalaIndex];

        LabelSecuencia.setText(secuencia);
    }

    public static String[] aplicarTiposAcordes(String[] escalaGenerada, int escalaIndex) {
        if (escalaGenerada.length < 5) {
            System.err.println("La escala generada tiene menos de 5 notas, no se puede aplicar la tabla.");
            return escalaGenerada;
        }

        String Mayor = "";
        String Menor = "m";
        String Disminuido = "dism";

        String tipoTonica = "";
        String tipoTension = "";
        String tipoAcompanante = "";
        String[] tipoComplementos = new String[2];

        switch (escalaIndex) {
            case 0:
                tipoTonica = Mayor;
                tipoTension = Mayor;
                tipoAcompanante = Mayor;
                tipoComplementos[0] = Menor;
                tipoComplementos[1] = Menor;
                break;
            case 1:
                tipoTonica = Menor;
                tipoTension = Mayor;
                tipoAcompanante = Menor;
                tipoComplementos[0] = Menor;
                tipoComplementos[1] = Disminuido;
                break;
            case 2:
                tipoTonica = Menor;
                tipoTension = Menor;
                tipoAcompanante = Disminuido;
                tipoComplementos[0] = Mayor;
                tipoComplementos[1] = Mayor;
                break;
            case 3:
                tipoTonica = Mayor;
                tipoTension = Disminuido;
                tipoAcompanante = Mayor;
                tipoComplementos[0] = Mayor;
                tipoComplementos[1] = Menor;
                break;
            case 4:
                tipoTonica = Mayor;
                tipoTension = Mayor;
                tipoAcompanante = Menor;
                tipoComplementos[0] = Menor;
                tipoComplementos[1] = Menor;
                break;
            case 5:
                tipoTonica = Menor;
                tipoTension = Menor;
                tipoAcompanante = Menor;
                tipoComplementos[0] = Disminuido;
                tipoComplementos[1] = Mayor;
                break;
            case 6:
                tipoTonica = Disminuido;
                tipoTension = Menor;
                tipoAcompanante = Mayor;
                tipoComplementos[0] = Mayor;
                tipoComplementos[1] = Mayor;
                break;
        }

        escalaGenerada[0] += tipoTonica;
        escalaGenerada[1] += tipoTension;
        escalaGenerada[2] += tipoAcompanante;

        escalaGenerada[3] = escalaGenerada[3] + tipoComplementos[0] + "/ " + escalaGenerada[4] + tipoComplementos[1];

        return Arrays.copyOf(escalaGenerada, 4);
    }

    public static String[] escalaGenerada(List<Nota> notas, String notaInicial, List<Integer> progresion) {
        String[] escala = new String[progresion.size() + 1];

        int posInicial = -1;
        for (Nota nota : notas) {
            if (nota.getNombre().equalsIgnoreCase(notaInicial)) {
                posInicial = nota.getNumero() - 1;
                break;
            }
        }

        if (posInicial == -1) {
            return null;
        }

        escala[0] = notas.get(posInicial).getNombre();
        int posicionActual = posInicial;
        for (int i = 0; i < progresion.size(); i++) {
            posicionActual += progresion.get(i);
            if (posicionActual >= notas.size()) {
                posicionActual -= notas.size();
            }
            escala[i + 1] = notas.get(posicionActual).getNombre();
        }

        return escala;

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        this.dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GaleriaEscalas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GaleriaEscalas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GaleriaEscalas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GaleriaEscalas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GaleriaEscalas().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> CmbEscala;
    private javax.swing.JComboBox<String> CmbNota;
    private javax.swing.JLabel LabelSecuencia;
    private javax.swing.JLabel LabelWallpaper;
    private javax.swing.JTable TableCirculo;
    private javax.swing.JTable TableNotas;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    // End of variables declaration//GEN-END:variables
}
