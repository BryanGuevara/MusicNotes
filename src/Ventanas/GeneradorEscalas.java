/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Ventanas;

import Clases.Nota;
import java.awt.Color;
import java.awt.Font;
import java.awt.Image;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.*;

public class GeneradorEscalas extends javax.swing.JFrame {

    int generada = 0;
    DefaultTableModel notas = new DefaultTableModel();
    DefaultTableModel secuencia = new DefaultTableModel();
    List<Integer> progresion = new ArrayList<>();
    private int hoveredRow = -1;

    public GeneradorEscalas() {
        initComponents();

        this.setLocationRelativeTo(null);

        TableNotas = new JTable(notas);
        jScrollPane2.setViewportView(TableNotas);

        TableSecuencia = new JTable(secuencia);
        jScrollPane1.setViewportView(TableSecuencia);

        jScrollPane2.setOpaque(false);
        jScrollPane2.getViewport().setOpaque(false);
        jScrollPane2.setBorder(null);
        TableNotas.setShowGrid(false);
        jScrollPane1.setOpaque(false);
        jScrollPane1.getViewport().setOpaque(false);
        jScrollPane1.setBorder(null);
        TableSecuencia.setShowGrid(false);
        TableNotas.setDefaultEditor(Object.class, null);
        TableSecuencia.setDefaultEditor(Object.class, null);

        Font font = new Font("Arial Black", Font.PLAIN, 12);
        TableNotas.setFont(font);
        TableSecuencia.setFont(font);

        TableNotas.setDefaultRenderer(Object.class, new CustomTableCellRenderer());
        TableSecuencia.setDefaultRenderer(Object.class, new CustomTableCellRenderer());

        TableNotas.setEnabled(false);
        TableSecuencia.setEnabled(false);

        secuencia.addColumn("Secuencia");
        ImageIcon wallpaper = new ImageIcon("src/img/wallpaperPartitura.jpg");
        Icon icon = new ImageIcon(wallpaper.getImage().getScaledInstance(LabelWallpaper.getWidth(),
                LabelWallpaper.getHeight(), Image.SCALE_DEFAULT));

        LabelWallpaper.setIcon(icon);

        TableNotas.addMouseMotionListener(new MouseMotionAdapter() {
            @Override
            public void mouseMoved(MouseEvent e) {
                int row = TableNotas.rowAtPoint(e.getPoint());
                if (row != hoveredRow) {
                    hoveredRow = row;
                    TableNotas.repaint();
                }
            }
        });

        TableNotas.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseExited(MouseEvent e) {
                hoveredRow = -1;
                TableNotas.repaint();
            }
        });

    }

    private class CustomTableCellRenderer extends DefaultTableCellRenderer {

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value,
                boolean isSelected, boolean hasFocus, int row, int column) {
            Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);

            if (row == hoveredRow) {
                c.setBackground(new Color(173, 216, 230));
                c.setForeground(Color.BLACK);
            } else {
                c.setBackground(new Color(51, 51, 51));
                c.setForeground(new Color(255, 255, 255));
            }

            return c;
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        TableSecuencia = new javax.swing.JTable();
        jTextField1 = new javax.swing.JTextField();
        SemiTono1 = new javax.swing.JButton();
        Tono1 = new javax.swing.JButton();
        TonoMedio1 = new javax.swing.JButton();
        Tono2 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        TableNotas = new javax.swing.JTable();
        Generar = new javax.swing.JButton();
        GenerarEscala = new javax.swing.JButton();
        Reset = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox<>();
        jTextField2 = new javax.swing.JTextField();
        TextNotas = new javax.swing.JTextField();
        TextEscala = new javax.swing.JTextField();
        jButton5 = new javax.swing.JButton();
        LabelWallpaper = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setUndecorated(true);
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        TableSecuencia.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Secuencia"
            }
        ));
        jScrollPane1.setViewportView(TableSecuencia);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 20, 140, 220));

        jTextField1.setEditable(false);
        jTextField1.setBackground(new java.awt.Color(51, 51, 51));
        jTextField1.setFont(new java.awt.Font("Arial Black", 1, 18)); // NOI18N
        jTextField1.setForeground(new java.awt.Color(255, 255, 255));
        jTextField1.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField1.setText("PreeCargadas");
        jTextField1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(jTextField1, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 20, 280, 40));

        SemiTono1.setBackground(new java.awt.Color(51, 51, 51));
        SemiTono1.setFont(new java.awt.Font("Arial Black", 1, 18)); // NOI18N
        SemiTono1.setForeground(new java.awt.Color(255, 255, 255));
        SemiTono1.setText("1 Semitono");
        SemiTono1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        SemiTono1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SemiTono1ActionPerformed(evt);
            }
        });
        getContentPane().add(SemiTono1, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 60, 200, 40));

        Tono1.setBackground(new java.awt.Color(51, 51, 51));
        Tono1.setFont(new java.awt.Font("Arial Black", 1, 18)); // NOI18N
        Tono1.setForeground(new java.awt.Color(255, 255, 255));
        Tono1.setText("1 Tono");
        Tono1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        Tono1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Tono1ActionPerformed(evt);
            }
        });
        getContentPane().add(Tono1, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 100, 200, 40));

        TonoMedio1.setBackground(new java.awt.Color(51, 51, 51));
        TonoMedio1.setFont(new java.awt.Font("Arial Black", 1, 18)); // NOI18N
        TonoMedio1.setForeground(new java.awt.Color(255, 255, 255));
        TonoMedio1.setText("1 Tono y medio");
        TonoMedio1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        TonoMedio1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TonoMedio1ActionPerformed(evt);
            }
        });
        getContentPane().add(TonoMedio1, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 140, 200, 40));

        Tono2.setBackground(new java.awt.Color(51, 51, 51));
        Tono2.setFont(new java.awt.Font("Arial Black", 1, 18)); // NOI18N
        Tono2.setForeground(new java.awt.Color(255, 255, 255));
        Tono2.setText("2 Tonos");
        Tono2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        Tono2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Tono2ActionPerformed(evt);
            }
        });
        getContentPane().add(Tono2, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 180, 200, 40));

        TableNotas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "1째", "2째", "3째", "4째", "5째", "6째", "7째", "8째"
            }
        ));
        jScrollPane2.setViewportView(TableNotas);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(32, 287, 700, 220));

        Generar.setBackground(new java.awt.Color(51, 51, 51));
        Generar.setFont(new java.awt.Font("Arial Black", 1, 18)); // NOI18N
        Generar.setForeground(new java.awt.Color(255, 255, 255));
        Generar.setText("Generar");
        Generar.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        Generar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GenerarActionPerformed(evt);
            }
        });
        getContentPane().add(Generar, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 100, 260, 40));

        GenerarEscala.setBackground(new java.awt.Color(51, 51, 51));
        GenerarEscala.setFont(new java.awt.Font("Arial Black", 1, 18)); // NOI18N
        GenerarEscala.setForeground(new java.awt.Color(255, 255, 255));
        GenerarEscala.setText("Generar");
        GenerarEscala.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        GenerarEscala.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GenerarEscalaActionPerformed(evt);
            }
        });
        getContentPane().add(GenerarEscala, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 220, 200, 40));

        Reset.setBackground(new java.awt.Color(51, 51, 51));
        Reset.setFont(new java.awt.Font("Arial Black", 1, 18)); // NOI18N
        Reset.setForeground(new java.awt.Color(255, 255, 255));
        Reset.setText("Reiniciar");
        Reset.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        Reset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ResetActionPerformed(evt);
            }
        });
        getContentPane().add(Reset, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 220, 200, 40));

        jComboBox1.setBackground(new java.awt.Color(51, 51, 51));
        jComboBox1.setFont(new java.awt.Font("Arial Black", 1, 18)); // NOI18N
        jComboBox1.setForeground(new java.awt.Color(255, 255, 255));
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Mayor", "D처rica", "Frigia", "Lidia", "Mixolidia", "Menor Natural", "Locria", "Pentat처nica", "Arm처nica", "Mel처dica Ascendente", "Pentat처nica Menor", "Arm처nica Menor", "Mel처dica Menor", "Blues", "Pentat처nica Blues", "Crom찼tica", "Gipsy", "Gipsy Menor", "Frigia Dominante", "Doble Arm처nica", "Lidia Aumentada", "Lidia Dominante", "Superlocria", "Hex찼tona", "Trit처nica", "Neopolitana Mayor", "Neopolitana Menor", "D처rica Menor", "Whole Tone", "Mel처dica de Jazz", "Sim챕trica", "Locrian Natural 2", "H첬ngara Menor", "H첬ngara Mayor", "Enigm찼tica", "Bebop Mayor", "Bebop Menor", "Escala de Aumentos" }));
        jComboBox1.setAutoscrolls(true);
        jComboBox1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(jComboBox1, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 60, 260, 40));

        jTextField2.setEditable(false);
        jTextField2.setBackground(new java.awt.Color(51, 51, 51));
        jTextField2.setFont(new java.awt.Font("Arial Black", 1, 18)); // NOI18N
        jTextField2.setForeground(new java.awt.Color(255, 255, 255));
        jTextField2.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField2.setText("Insertar secencia");
        jTextField2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(jTextField2, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 20, 220, 40));

        TextNotas.setEditable(false);
        TextNotas.setBackground(new java.awt.Color(51, 51, 51));
        TextNotas.setFont(new java.awt.Font("Arial Black", 1, 14)); // NOI18N
        TextNotas.setForeground(new java.awt.Color(255, 255, 255));
        TextNotas.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        TextNotas.setText("N째 de Notas");
        TextNotas.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(TextNotas, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 180, 260, 40));

        TextEscala.setEditable(false);
        TextEscala.setBackground(new java.awt.Color(51, 51, 51));
        TextEscala.setFont(new java.awt.Font("Arial Black", 1, 14)); // NOI18N
        TextEscala.setForeground(new java.awt.Color(255, 255, 255));
        TextEscala.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        TextEscala.setText("Generador de escalas");
        TextEscala.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(TextEscala, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 220, 260, 40));

        jButton5.setBackground(new java.awt.Color(51, 51, 51));
        jButton5.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jButton5.setForeground(new java.awt.Color(255, 0, 0));
        jButton5.setText("X");
        jButton5.setBorder(null);
        jButton5.setBorderPainted(false);
        jButton5.setContentAreaFilled(false);
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton5, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 0, 40, 40));

        LabelWallpaper.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(LabelWallpaper, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 780, 530));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void SemiTono1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SemiTono1ActionPerformed
        if (generada == 0) {
            if (progresion.size() + 1 < 13) {
                progresion.add(1);
                secuencia.addRow(new Object[]{"SemiTono"});
            }
        }
    }//GEN-LAST:event_SemiTono1ActionPerformed

    private void GenerarEscalaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GenerarEscalaActionPerformed
        if (progresion.size() + 1 != 1) {
            generada = 1;

            int y = 1;

            GenerarEscala.setVisible(false);
            Generar.setVisible(false);

            for (int i = 0; i < progresion.size() + 1; i++) {
                String nombreColumna = y + "째";
                notas.addColumn(nombreColumna);
                y += 1;
            }

            String[][] todasLasEscalas = new String[12][];

            for (int notaIndex = 0; notaIndex < 12; notaIndex++) {
                Nota[] notas = {
                    new Nota(1, "DO"),
                    new Nota(2, "DO#"),
                    new Nota(3, "RE"),
                    new Nota(4, "RE#"),
                    new Nota(5, "MI"),
                    new Nota(6, "FA"),
                    new Nota(7, "FA#"),
                    new Nota(8, "SOL"),
                    new Nota(9, "SOL#"),
                    new Nota(10, "LA"),
                    new Nota(11, "LA#"),
                    new Nota(12, "SI")
                };

                List<Integer> escalaprog = progresion != null ? progresion : Arrays.asList(2, 2, 1, 2, 2, 2, 1);
                List<Nota> notasList = Arrays.asList(notas);
                String notaInicial = notas[notaIndex].getNombre();
                todasLasEscalas[notaIndex] = escalaGenerada(notasList, notaInicial, escalaprog);
                TextNotas.setText(progresion.size() + 1 + " Notas");
            }

            for (String[] escalaGenerada : todasLasEscalas) {
                if (escalaGenerada != null) {
                    notas.addRow(escalaGenerada);
                }
            }
        }
    }//GEN-LAST:event_GenerarEscalaActionPerformed

    private void ResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ResetActionPerformed
        new GeneradorEscalas().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_ResetActionPerformed

    private void GenerarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GenerarActionPerformed

        int columnCount = notas.getColumnCount();
        for (int i = columnCount - 1; i >= 0; i--) {
            notas.setColumnCount(i);
        }

        int RowCount = notas.getRowCount();
        for (int i = RowCount - 1; i >= 0; i--) {
            notas.setRowCount(i);
        }

        int escala = jComboBox1.getSelectedIndex();
        generada = 1;

        while (secuencia.getRowCount() > 0) {
            secuencia.removeRow(0);
        }

        if (escala == 0) {
            progresion = Arrays.asList(2, 2, 1, 2, 2, 2, 1); // Mayor
            TextEscala.setText("Mayor");
        } else if (escala == 1) {
            progresion = Arrays.asList(2, 1, 2, 2, 2, 2, 1); // D처rica
            TextEscala.setText("D처rica");
        } else if (escala == 2) {
            progresion = Arrays.asList(1, 2, 2, 2, 1, 2, 2); // Frigia
            TextEscala.setText("Frigia");
        } else if (escala == 3) {
            progresion = Arrays.asList(2, 2, 2, 1, 2, 2, 1); // Lidia
            TextEscala.setText("Lidia");
        } else if (escala == 4) {
            progresion = Arrays.asList(2, 2, 1, 2, 2, 1, 2); // Mixolidia
            TextEscala.setText("Mixolidia");
        } else if (escala == 5) {
            progresion = Arrays.asList(2, 1, 2, 2, 1, 2, 2); // Menor Natural
            TextEscala.setText("Menor");
        } else if (escala == 6) {
            progresion = Arrays.asList(1, 2, 2, 1, 2, 2, 2); // Locria
            TextEscala.setText("Locria");
        } else if (escala == 7) {
            progresion = Arrays.asList(2, 2, 3, 2, 3); // Pentat처nica
            TextEscala.setText("Pentat처nica");
        } else if (escala == 8) {
            progresion = Arrays.asList(2, 1, 3, 2, 1, 3, 1); // Arm처nica
            TextEscala.setText("Arm처nica");
        } else if (escala == 9) {
            progresion = Arrays.asList(2, 1, 2, 2, 2, 2, 1); // Mel처dica Ascendente
            TextEscala.setText("Mel처dica Ascendente");
        } else if (escala == 10) {
            progresion = Arrays.asList(3, 2, 2, 3); // Pentat처nica Menor
            TextEscala.setText("Pentat처nica Menor");
        } else if (escala == 11) {
            progresion = Arrays.asList(2, 1, 2, 2, 1, 3, 1); // Arm처nica Menor
            TextEscala.setText("Arm처nica Menor");
        } else if (escala == 12) {
            progresion = Arrays.asList(2, 1, 2, 2, 2, 2, 1); // Mel처dica Menor
            TextEscala.setText("Mel처dica Menor");
        } else if (escala == 13) {
            progresion = Arrays.asList(3, 2, 1, 1, 3, 2); // Blues
            TextEscala.setText("Blues");
        } else if (escala == 14) {
            progresion = Arrays.asList(3, 2, 1, 1, 2); // Pentat처nica Blues
            TextEscala.setText("Pentat처nica Blues");
        } else if (escala == 15) {
            progresion = Arrays.asList(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1); // Crom찼tica
            TextEscala.setText("Crom찼tica");
        } else if (escala == 16) {
            progresion = Arrays.asList(1, 2, 3, 2, 2, 1, 1); // Gipsy
            TextEscala.setText("Gipsy");
        } else if (escala == 17) {
            progresion = Arrays.asList(1, 2, 3, 1, 2, 2); // Gipsy Menor
            TextEscala.setText("Gipsy Menor");
        } else if (escala == 18) {
            progresion = Arrays.asList(1, 3, 1, 2, 1, 2, 2); // Frigia Dominante
            TextEscala.setText("Frigia Dominante");
        } else if (escala == 19) {
            progresion = Arrays.asList(1, 3, 1, 2, 1, 2, 2); // Doble Arm처nica
            TextEscala.setText("Doble Arm처nica");
        } else if (escala == 20) {
            progresion = Arrays.asList(2, 2, 2, 1, 2, 1, 2); // Lidia Aumentada
            TextEscala.setText("Lidia Aumentada");
        } else if (escala == 21) {
            progresion = Arrays.asList(2, 2, 1, 2, 2, 1, 2); // Lidia Dominante
            TextEscala.setText("Lidia Dominante");
        } else if (escala == 22) {
            progresion = Arrays.asList(1, 2, 1, 2, 2, 2, 2); // Superlocria
            TextEscala.setText("Superlocria");
        } else if (escala == 23) {
            progresion = Arrays.asList(6, 2, 2, 2, 2, 2); // Hex찼tona
            TextEscala.setText("Hex찼tona");
        } else if (escala == 24) {
            progresion = Arrays.asList(3, 3, 2, 2, 2, 2); // Trit처nica
            TextEscala.setText("Trit처nica");
        } else if (escala == 25) {
            progresion = Arrays.asList(1, 2, 2, 2, 1, 2, 2); // Neopolitana Mayor
            TextEscala.setText("Neopolitana Mayor");
        } else if (escala == 26) {
            progresion = Arrays.asList(1, 2, 1, 2, 2, 2, 2); // Neopolitana Menor
            TextEscala.setText("Neopolitana Menor");
        } else if (escala == 27) {
            progresion = Arrays.asList(2, 2, 2, 2, 2, 2); // D처rica Menor
            TextEscala.setText("D처rica Menor");
        } else if (escala == 28) {
            progresion = Arrays.asList(2, 2, 2, 2, 2, 2); // Whole Tone
            TextEscala.setText("Whole Tone");
        } else if (escala == 29) {
            progresion = Arrays.asList(2, 1, 3, 1, 2, 1, 2); // Mel처dica de Jazz
            TextEscala.setText("Mel처dica de Jazz");
        } else if (escala == 30) {
            progresion = Arrays.asList(1, 2, 1, 2, 1, 2, 2, 1); // Sim챕trica
            TextEscala.setText("Sim챕trica");
        } else if (escala == 31) {
            progresion = Arrays.asList(1, 2, 3, 1, 2, 1, 2); // Locrian Natural 2
            TextEscala.setText("Locrian Natural 2");
        } else if (escala == 32) {
            progresion = Arrays.asList(1, 2, 2, 2, 2, 1, 2); // H첬ngara Menor
            TextEscala.setText("H첬ngara Menor");
        } else if (escala == 33) {
            progresion = Arrays.asList(1, 2, 2, 2, 2, 1, 2); // H첬ngara Mayor
            TextEscala.setText("H첬ngara Mayor");
        } else if (escala == 34) {
            progresion = Arrays.asList(2, 1, 2, 1, 2, 2); // Enigm찼tica
            TextEscala.setText("Enigm찼tica");
        } else if (escala == 35) {
            progresion = Arrays.asList(2, 2, 1, 1, 1, 2); // Bebop Mayor
            TextEscala.setText("Bebop Mayor");
        } else if (escala == 36) {
            progresion = Arrays.asList(2, 1, 2, 2, 1, 1); // Bebop Menor
            TextEscala.setText("Bebop Menor");
        } else if (escala == 37) {
            progresion = Arrays.asList(1, 2, 1, 2, 1, 2); // Escala de Aumentos
            TextEscala.setText("Escala de Aumentos");
        } 

        int y = 1;

        for (Integer intervalo : progresion) {
            if (intervalo == 1) {
                secuencia.addRow(new Object[]{"SemiTono"});
            } else if (intervalo == 2) {
                secuencia.addRow(new Object[]{"Tono"});
            } else if (intervalo == 3) {
                secuencia.addRow(new Object[]{"Tono y Medio"});
            } else if (intervalo == 4) {
                secuencia.addRow(new Object[]{"2 Tonos"});
            }
        }

        TextNotas.setText(progresion.size() + 1 + " Notas");
        GenerarEscala.setVisible(false);

        for (int i = 0; i < progresion.size() + 1; i++) {
            String nombreColumna = y + "째";
            notas.addColumn(nombreColumna);
            y += 1;
        }

        String[][] todasLasEscalas = new String[12][];

        for (int notaIndex = 0; notaIndex < 12; notaIndex++) {
            Nota[] notas = {
                new Nota(1, "DO"),
                new Nota(2, "DO#"),
                new Nota(3, "RE"),
                new Nota(4, "RE#"),
                new Nota(5, "MI"),
                new Nota(6, "FA"),
                new Nota(7, "FA#"),
                new Nota(8, "SOL"),
                new Nota(9, "SOL#"),
                new Nota(10, "LA"),
                new Nota(11, "LA#"),
                new Nota(12, "SI")
            };

            List<Integer> escalaprog = progresion != null ? progresion : Arrays.asList(2, 2, 1, 2, 2, 2, 1); // Default mayor
            List<Nota> notasList = Arrays.asList(notas);
            String notaInicial = notas[notaIndex].getNombre();
            todasLasEscalas[notaIndex] = escalaGenerada(notasList, notaInicial, escalaprog);
        }

        for (String[] escalaGenerada : todasLasEscalas) {
            if (escalaGenerada != null) {
                notas.addRow(escalaGenerada);
            }
        }


    }//GEN-LAST:event_GenerarActionPerformed

    private void Tono1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Tono1ActionPerformed
        if (generada == 0) {
            if (progresion.size() + 1 < 13) {
                progresion.add(2);
                secuencia.addRow(new Object[]{"Tono"});
            }
        }
    }//GEN-LAST:event_Tono1ActionPerformed

    private void TonoMedio1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TonoMedio1ActionPerformed
        if (generada == 0) {
            if (progresion.size() + 1 < 13) {
                progresion.add(3);
                secuencia.addRow(new Object[]{"Tono y Medio"});
            }
        }
    }//GEN-LAST:event_TonoMedio1ActionPerformed

    private void Tono2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Tono2ActionPerformed
        if (generada == 0) {
            if (progresion.size() + 1 < 13) {
                progresion.add(4);
                secuencia.addRow(new Object[]{"2 Tonos"});
            }
        }
    }//GEN-LAST:event_Tono2ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        this.dispose();
    }//GEN-LAST:event_jButton5ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GeneradorEscalas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GeneradorEscalas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GeneradorEscalas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GeneradorEscalas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GeneradorEscalas().setVisible(true);
            }
        });
    }

    public static String[] escalaGenerada(List<Nota> notas, String notaInicial, List<Integer> progresion) {
        String[] escala = new String[progresion.size() + 1];

        int posInicial = -1;
        for (Nota nota : notas) {
            if (nota.getNombre().equalsIgnoreCase(notaInicial)) {
                posInicial = nota.getNumero() - 1;
                break;
            }
        }

        if (posInicial == -1) {
            return null;
        }

        escala[0] = notas.get(posInicial).getNombre();
        int posicionActual = posInicial;
        for (int i = 0; i < progresion.size(); i++) {
            posicionActual += progresion.get(i);
            if (posicionActual >= notas.size()) {
                posicionActual -= notas.size();
            }
            escala[i + 1] = notas.get(posicionActual).getNombre();
        }

        return escala;

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Generar;
    private javax.swing.JButton GenerarEscala;
    private javax.swing.JLabel LabelWallpaper;
    private javax.swing.JButton Reset;
    private javax.swing.JButton SemiTono1;
    private javax.swing.JTable TableNotas;
    private javax.swing.JTable TableSecuencia;
    private javax.swing.JTextField TextEscala;
    private javax.swing.JTextField TextNotas;
    private javax.swing.JButton Tono1;
    private javax.swing.JButton Tono2;
    private javax.swing.JButton TonoMedio1;
    private javax.swing.JButton jButton5;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    // End of variables declaration//GEN-END:variables
}
